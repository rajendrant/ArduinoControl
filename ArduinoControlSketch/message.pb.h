/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8-dev at Wed Nov 23 18:45:25 2016. */

#ifndef PB_MESSAGE_PB_H_INCLUDED
#define PB_MESSAGE_PB_H_INCLUDED
#include "nanopb/pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _PinModeControl_Mode {
    PinModeControl_Mode_INPUT = 0,
    PinModeControl_Mode_OUTPUT = 1,
    PinModeControl_Mode_INPUT_PULLUP = 2
} PinModeControl_Mode;
#define _PinModeControl_Mode_MIN PinModeControl_Mode_INPUT
#define _PinModeControl_Mode_MAX PinModeControl_Mode_INPUT_PULLUP
#define _PinModeControl_Mode_ARRAYSIZE ((PinModeControl_Mode)(PinModeControl_Mode_INPUT_PULLUP+1))

typedef enum _IOReadWrite_Operation {
    IOReadWrite_Operation_DIGITAL_READ = 0,
    IOReadWrite_Operation_DIGITAL_WRITE = 1,
    IOReadWrite_Operation_ANALOG_READ = 2,
    IOReadWrite_Operation_ANALOG_WRITE = 3
} IOReadWrite_Operation;
#define _IOReadWrite_Operation_MIN IOReadWrite_Operation_DIGITAL_READ
#define _IOReadWrite_Operation_MAX IOReadWrite_Operation_ANALOG_WRITE
#define _IOReadWrite_Operation_ARRAYSIZE ((IOReadWrite_Operation)(IOReadWrite_Operation_ANALOG_WRITE+1))

typedef enum _ServoControl_Operation {
    ServoControl_Operation_ATTACH = 0,
    ServoControl_Operation_DETACH = 1,
    ServoControl_Operation_WRITE = 2,
    ServoControl_Operation_READ = 3
} ServoControl_Operation;
#define _ServoControl_Operation_MIN ServoControl_Operation_ATTACH
#define _ServoControl_Operation_MAX ServoControl_Operation_READ
#define _ServoControl_Operation_ARRAYSIZE ((ServoControl_Operation)(ServoControl_Operation_READ+1))

/* Struct definitions */
typedef struct _IOReadWrite {
    uint32_t pin;
    IOReadWrite_Operation operation;
    bool has_val;
    uint32_t val;
/* @@protoc_insertion_point(struct:IOReadWrite) */
} IOReadWrite;

typedef struct _PinModeControl {
    uint32_t pin;
    PinModeControl_Mode mode;
/* @@protoc_insertion_point(struct:PinModeControl) */
} PinModeControl;

typedef struct _PingTest {
    uint32_t num;
/* @@protoc_insertion_point(struct:PingTest) */
} PingTest;

typedef struct _ServoControl {
    uint32_t pin;
    ServoControl_Operation operation;
    bool has_val;
    uint32_t val;
/* @@protoc_insertion_point(struct:ServoControl) */
} ServoControl;

typedef struct _Message {
    pb_size_t which_msg;
    union {
        PingTest ping_test;
        PinModeControl pin_mode_control;
        IOReadWrite io_read_write;
        ServoControl servo_control;
    } msg;
/* @@protoc_insertion_point(struct:Message) */
} Message;

/* Default values for struct fields */

/* Initializer values for message structs */
#define PingTest_init_default                    {0}
#define PinModeControl_init_default              {0, (PinModeControl_Mode)0}
#define IOReadWrite_init_default                 {0, (IOReadWrite_Operation)0, false, 0}
#define ServoControl_init_default                {0, (ServoControl_Operation)0, false, 0}
#define Message_init_default                     {0, {PingTest_init_default}}
#define PingTest_init_zero                       {0}
#define PinModeControl_init_zero                 {0, (PinModeControl_Mode)0}
#define IOReadWrite_init_zero                    {0, (IOReadWrite_Operation)0, false, 0}
#define ServoControl_init_zero                   {0, (ServoControl_Operation)0, false, 0}
#define Message_init_zero                        {0, {PingTest_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define IOReadWrite_pin_tag                      1
#define IOReadWrite_operation_tag                2
#define IOReadWrite_val_tag                      3
#define PinModeControl_pin_tag                   1
#define PinModeControl_mode_tag                  2
#define PingTest_num_tag                         1
#define ServoControl_pin_tag                     1
#define ServoControl_operation_tag               2
#define ServoControl_val_tag                     3
#define Message_ping_test_tag                    1
#define Message_pin_mode_control_tag             2
#define Message_io_read_write_tag                3
#define Message_servo_control_tag                4

/* Struct field encoding specification for nanopb */
extern const pb_field_t PingTest_fields[2];
extern const pb_field_t PinModeControl_fields[3];
extern const pb_field_t IOReadWrite_fields[4];
extern const pb_field_t ServoControl_fields[4];
extern const pb_field_t Message_fields[5];

/* Maximum encoded size of messages (where known) */
#define PingTest_size                            6
#define PinModeControl_size                      8
#define IOReadWrite_size                         14
#define ServoControl_size                        14
#define Message_size                             16

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
